{"remainingRequest":"C:\\Projects\\Roosefy-backOffice\\roosefy\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Projects\\Roosefy-backOffice\\roosefy\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Projects\\Roosefy-backOffice\\roosefy\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Projects\\Roosefy-backOffice\\roosefy\\src\\views\\canvas-pages\\template-canvas-story.vue?vue&type=template&id=5935dc66&scoped=true&","dependencies":[{"path":"C:\\Projects\\Roosefy-backOffice\\roosefy\\src\\views\\canvas-pages\\template-canvas-story.vue","mtime":1621717252619},{"path":"C:\\Projects\\Roosefy-backOffice\\roosefy\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Projects\\Roosefy-backOffice\\roosefy\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Projects\\Roosefy-backOffice\\roosefy\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Projects\\Roosefy-backOffice\\roosefy\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}